const pos = require("../../models/POS/pos.schema");
const building = require("../../models/POS/building.schema");
const room = require("../../models/POS/room.schema");
const tagPOS = require("../../models/POS/tag.schema");
const multer = require("multer");
const path = require("path");
const fs = require("fs");

// ==================== MULTER CONFIGURATION ====================
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    const uploadPath = path.join(__dirname, "../uploads/room");
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    cb(null, uploadPath);
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const upload = multer({
  storage: storage,
  limits: { files: 10 },
}).array("imgrooms", 10);

// ==================== HELPER FUNCTIONS ====================
const updatePosStatistics = async (partnerId) => {
  try {
    console.log('üîÑ Updating POS statistics for partnerId:', partnerId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const buildings = await building.find({ partnerId });
    const rooms = await room.find({ partnerId });
    const sleepGunRooms = rooms.filter(room => room.status === 'SleepGunWeb');
    
    let totalFloorCount = 0;
    buildings.forEach(buildingDoc => {
      if (buildingDoc.floors && Array.isArray(buildingDoc.floors)) {
        totalFloorCount += buildingDoc.floors.length;
      }
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS
    const posData = await pos.findOne({ partnerId });
    if (posData) {
      posData.buildingCount = buildings.length;
      posData.floorCount = totalFloorCount;
      posData.roomCount = rooms.length;
      posData.roomCountSleepGun = sleepGunRooms.length;
      posData.quotaRoomSleepGun = 5;
      await posData.save();
      console.log('‚úÖ Updated existing POS statistics');
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡πÉ‡∏´‡∏°‡πà
      const newPos = new pos({
        partnerId,
        buildingCount: buildings.length,
        floorCount: totalFloorCount,
        roomCount: rooms.length,
        roomCountSleepGun: sleepGunRooms.length,
        quotaRoomSleepGun: 5
      });
      await newPos.save();
      console.log('‚úÖ Created new POS statistics');
    }
  } catch (error) {
    console.error("‚ùå Error updating POS statistics:", error);
  }
};

// ==================== POS CONTROLLERS ====================
const createPos = async (req, res) => {
  try {
    const { buildingCount, floorCount, floorDetail, roomCount, roomCountSleepGun, quotaRoomSleepGun, tag, building, room } = req.body;
    const partnerId = req.partner.id;

    if (buildingCount === undefined || floorCount === undefined || roomCount === undefined) {
      return res.status(400).json({
        success: false,
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
      });
    }

    const newPos = new pos({
      partnerId,
      buildingCount: buildingCount || 0,
      floorCount: floorCount || 0,
      floorDetail: floorDetail || '',
      roomCount: roomCount || 0,
      roomCountSleepGun: roomCountSleepGun || 0,
      quotaRoomSleepGun: quotaRoomSleepGun || 5,
      tags: tag ? [tag] : [],
      buildings: building ? [building] : [],
      rooms: room ? [room] : [],
    });

    const savedPos = await newPos.save();
    res.status(201).json({
      success: true,
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: savedPos,
    });
  } catch (error) {
    console.error("‚ùå Error creating POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á POS",
      error: error.message,
    });
  }
};

const getAllPos = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    
    const posData = await pos.find({ partnerId })
      .populate('tags', 'name color')
      .populate('buildings', 'nameBuilding colorText hascolorBG colorBG imgBG')
      .populate('rooms', 'roomNumber price typeRoom air statusRoom status statusPromotion')
      .sort({ createdAt: -1 });

    const tags = await tagPOS.find({ partnerId });
    const buildings = await building.find({ partnerId });
    const rooms = await room.find({ partnerId })
      .populate('typeRoom')
      .populate('typeRoomHotel');

    const enrichedPosData = posData.map(posItem => ({
      ...posItem.toObject(),
      tags: tags,
      buildings: buildings,
      rooms: rooms
    }));

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: enrichedPosData,
    });
  } catch (error) {
    console.error("‚ùå Error fetching POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      error: error.message,
    });
  }
};

const getPosById = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;
    
    const posData = await pos.findOne({ _id: id, partnerId })
      .populate('tags', 'name color')
      .populate('buildings', 'nameBuilding colorText hascolorBG colorBG imgBG')
      .populate('rooms', 'roomNumber price typeRoom air statusRoom status statusPromotion');

    if (!posData) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      });
    }

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: posData,
    });
  } catch (error) {
    console.error("‚ùå Error fetching POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      error: error.message,
    });
  }
};

const getPosSummary = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    console.log('üîç Getting POS summary for partnerId:', partnerId);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á buildings ‡πÅ‡∏•‡∏∞ rooms
    const buildings = await building.find({ partnerId });
    const rooms = await room.find({ partnerId });
    
    console.log('üè¢ Found buildings:', buildings.length);
    console.log('üè† Found rooms:', rooms.length);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô SleepGunWeb
    const sleepGunRooms = rooms.filter(room => room.status === 'SleepGunWeb');
    console.log('üí§ SleepGun rooms:', sleepGunRooms.length);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    let totalFloorCount = 0;
    buildings.forEach(buildingDoc => {
      if (buildingDoc.floors && Array.isArray(buildingDoc.floors)) {
        totalFloorCount += buildingDoc.floors.length;
      }
    });
    console.log('üè¢ Total floors:', totalFloorCount);
    
    const summary = {
      totalBuildingCount: buildings.length,
      totalFloorCount: totalFloorCount,
      totalRoomCount: rooms.length,
      totalRoomCountSleepGun: sleepGunRooms.length,
      totalQuotaRoomSleepGun: 5, // ‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      totalPosRecords: buildings.length + rooms.length
    };

    console.log('üìä POS Summary:', summary);

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: summary,
    });
  } catch (error) {
    console.error("‚ùå Error fetching POS summary:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ POS",
      error: error.message,
    });
  }
};

const updatePos = async (req, res) => {
  try {
    const { id } = req.params;
    const { buildingCount, floorCount, floorDetail, roomCount, roomCountSleepGun, quotaRoomSleepGun, tag, building, room } = req.body;
    const partnerId = req.partner.id;

    const existingPos = await pos.findOne({ _id: id, partnerId });
    if (!existingPos) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      });
    }

    const updatedPos = await pos.findByIdAndUpdate(
      id,
      { buildingCount, floorCount, floorDetail, roomCount, roomCountSleepGun, quotaRoomSleepGun, tag, building, room },
      { new: true }
    ).populate('tag', 'name color')
     .populate('building', 'nameBuilding colorText hascolorBG colorBG imgBG')
     .populate('room', 'roomNumber price typeRoom air statusRoom status statusPromotion');

    res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: updatedPos,
    });
  } catch (error) {
    console.error("‚ùå Error updating POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      error: error.message,
    });
  }
};

const deletePos = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;

    const existingPos = await pos.findOne({ _id: id, partnerId });
    if (!existingPos) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      });
    }

    const deletedPos = await pos.findByIdAndDelete(id);

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö POS ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: deletedPos,
    });
  } catch (error) {
    console.error("‚ùå Error deleting POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö POS",
      error: error.message,
    });
  }
};

const deleteAllPos = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    const deletedPos = await pos.deleteMany({ partnerId });

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö POS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: { deletedCount: deletedPos.deletedCount },
    });
  } catch (error) {
    console.error("‚ùå Error deleting all POS:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö POS ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      error: error.message,
    });
  }
};

// ==================== BUILDING CONTROLLERS ====================
const createBuilding = async (req, res) => {
  try {
    const { nameBuilding, colorText, hascolorBG, colorBG, imgBG } = req.body;
    const partnerId = req.partner.id;

    if (!nameBuilding || !colorText || !hascolorBG) {
      return res.status(400).json({
        success: false,
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
      });
    }

    if (hascolorBG === 'imgBG' && imgBG && !imgBG.startsWith('data:image/')) {
      return res.status(400).json({
        success: false,
        message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà",
      });
    }

    const newBuilding = new building({
      partnerId,
      nameBuilding,
      colorText,
      hascolorBG,
      colorBG: hascolorBG === 'colorBG' ? colorBG : undefined,
      imgBG: hascolorBG === 'imgBG' ? imgBG : undefined,
      floors: [] // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á
    });

    const savedBuilding = await newBuilding.save();
    console.log('‚úÖ Building saved, updating statistics...');
    await updatePosStatistics(partnerId);

    res.status(201).json({
      success: true,
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: savedBuilding,
    });
  } catch (error) {
    console.error("‚ùå Error creating building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∂‡∏Å",
      error: error.message,
    });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ï‡∏∂‡∏Å
const addFloorToBuilding = async (req, res) => {
  try {
    const { buildingId } = req.params;
    const { name, description } = req.body;
    const partnerId = req.partner.id;

    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô",
      });
    }

    const buildingData = await building.findOne({ _id: buildingId, partnerId });
    if (!buildingData) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingFloor = buildingData.floors.find(floor => floor.name === name.trim());
    if (existingFloor) {
      return res.status(400).json({
        success: false,
        message: "‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏∂‡∏Å‡∏ô‡∏µ‡πâ",
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
    buildingData.floors.push({
      name: name.trim(),
      description: description || "",
      roomCount: 0
    });

    const updatedBuilding = await buildingData.save();
    console.log('‚úÖ Floor added, updating statistics...');
    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: updatedBuilding,
    });
  } catch (error) {
    console.error("‚ùå Error adding floor to building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πâ‡∏ô",
      error: error.message,
    });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏∂‡∏Å
const removeFloorFromBuilding = async (req, res) => {
  try {
    const { buildingId, floorName } = req.params;
    const partnerId = req.partner.id;

    const buildingData = await building.findOne({ _id: buildingId, partnerId });
    if (!buildingData) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const roomCount = await room.countDocuments({ 
      buildingId: buildingId, 
      floor: floorName,
      partnerId: partnerId 
    });

    if (roomCount > 0) {
      return res.status(400).json({
        success: false,
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á ${roomCount} ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ`,
      });
    }

    // ‡∏•‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å
    buildingData.floors = buildingData.floors.filter(floor => floor.name !== floorName);
    const updatedBuilding = await buildingData.save();
    console.log('‚úÖ Floor removed, updating statistics...');
    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: updatedBuilding,
    });
  } catch (error) {
    console.error("‚ùå Error removing floor from building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ä‡∏±‡πâ‡∏ô",
      error: error.message,
    });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏ï‡∏∂‡∏Å
const getFloorsByBuilding = async (req, res) => {
  try {
    const { buildingId } = req.params;
    const partnerId = req.partner.id;

    const buildingData = await building.findOne({ _id: buildingId, partnerId });
    if (!buildingData) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: buildingData.floors,
    });
  } catch (error) {
    console.error("‚ùå Error getting floors by building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô",
      error: error.message,
    });
  }
};

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getAllBuildings ‡πÄ‡∏û‡∏∑‡πà‡∏≠ populate floors
const getAllBuildings = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    const buildings = await building.find({ partnerId }).sort({ createdAt: -1 });

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: buildings,
    });
  } catch (error) {
    console.error("‚ùå Error fetching buildings:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      error: error.message,
    });
  }
};

const getBuildingById = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;
    
    const buildingData = await building.findOne({ _id: id, partnerId });

    if (!buildingData) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: buildingData,
    });
  } catch (error) {
    console.error("‚ùå Error fetching building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      error: error.message,
    });
  }
};

const updateBuilding = async (req, res) => {
  try {
    const { id } = req.params;
    const { nameBuilding, colorText, hascolorBG, colorBG, imgBG } = req.body;
    const partnerId = req.partner.id;

    const existingBuilding = await building.findOne({ _id: id, partnerId });
    if (!existingBuilding) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    const updatedBuilding = await building.findByIdAndUpdate(
      id,
      {
        nameBuilding,
        colorText,
        hascolorBG,
        colorBG: hascolorBG === 'colorBG' ? colorBG : undefined,
        imgBG: hascolorBG === 'imgBG' ? imgBG : undefined,
      },
      { new: true }
    );

    console.log('‚úÖ Building updated, updating statistics...');
    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: updatedBuilding,
    });
  } catch (error) {
    console.error("‚ùå Error updating building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      error: error.message,
    });
  }
};

const deleteBuilding = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;

    const existingBuilding = await building.findOne({ _id: id, partnerId });
    if (!existingBuilding) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∂‡∏Å",
      });
    }

    const deletedBuilding = await building.findByIdAndDelete(id);
    console.log('‚úÖ Building deleted, updating statistics...');
    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö‡∏ï‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: deletedBuilding,
    });
  } catch (error) {
    console.error("‚ùå Error deleting building:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡∏∂‡∏Å",
      error: error.message,
    });
  }
};

// ==================== ROOM CONTROLLERS ====================
const createRoom = (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ message: err.message });
    }

    try {
      const imgrooms = req.files ? req.files.map((file) => file.filename) : [];

      if (!req.body.typeRoom) {
        return res.status(400).json({ message: "typeRoom is required" });
      }

      if (!req.body.buildingId) {
        return res.status(400).json({ message: "buildingId is required" });
      }

      if (!req.body.floor) {
        return res.status(400).json({ message: "floor is required" });
      }

      const roomData = {
        roomNumber: req.body.roomNumber,
        price: req.body.price,
        stayPeople: req.body.stayPeople,
        roomDetail: req.body.roomDetail,
        air: req.body.air,
        floor: req.body.floor,
        buildingId: req.body.buildingId, // ‡πÄ‡∏û‡∏¥‡πà‡∏° buildingId
        imgrooms: imgrooms,
        typeRoom: req.body.typeRoom,
        typeRoomHotel: req.body.typeRoomHotel
          ? Array.isArray(req.body.typeRoomHotel)
            ? req.body.typeRoomHotel
            : [req.body.typeRoomHotel]
          : [],
              tag: req.body.tag ? (Array.isArray(req.body.tag) ? req.body.tag : [req.body.tag]) : [],
        partnerId: req.partner.id,
      };

      const newRoom = new room(roomData);
      const savedRoom = await newRoom.save();

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï roomCount ‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô
      const buildingData = await building.findById(req.body.buildingId);
      if (buildingData) {
        const floorIndex = buildingData.floors.findIndex(floor => floor.name === req.body.floor);
        if (floorIndex !== -1) {
          buildingData.floors[floorIndex].roomCount += 1;
          await buildingData.save();
        }
      }

      console.log('‚úÖ Room created, updating statistics...');
      await updatePosStatistics(req.partner.id);

      res.status(201).json(savedRoom);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  });
};

const getAllRooms = async (req, res) => {
  try {
    const rooms = await room.find({ partnerId: req.partner.id })
      .populate("typeRoom")
      .populate("typeRoomHotel")
      .populate("tag", "name color description");
    res.json(rooms);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô
const getRoomsByBuildingAndFloor = async (req, res) => {
  try {
    const { buildingId, floor } = req.params;
    const partnerId = req.partner.id;
    
    const rooms = await room.find({ 
      partnerId: partnerId,
      buildingId: buildingId,
      floor: floor 
    })
      .populate("typeRoom")
      .populate("typeRoomHotel")
      .populate("buildingId", "nameBuilding")
      .populate("tag", "name color description");
      
    res.status(200).json({
      success: true,
      message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏∂‡∏Å ${buildingId} ‡∏ä‡∏±‡πâ‡∏ô ${floor} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: rooms
    });
  } catch (error) {
    console.error("‚ùå Error fetching rooms by building and floor:", error);
    res.status(500).json({ 
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å",
      error: error.message 
    });
  }
};

const getRoomsByFloor = async (req, res) => {
  try {
    const { buildingId, floor } = req.params;
    const partnerId = req.partner.id;
    
    const rooms = await room.find({ 
      partnerId: partnerId,
      buildingId: buildingId,
      floor: floor 
    })
      .populate("typeRoom")
      .populate("typeRoomHotel")
      .populate("buildingId", "nameBuilding")
      .populate("tag", "name color description");
      
    res.status(200).json({
      success: true,
      message: `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ï‡∏∂‡∏Å ${buildingId} ‡∏ä‡∏±‡πâ‡∏ô ${floor} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      data: rooms
    });
  } catch (error) {
    console.error("‚ùå Error fetching rooms by floor:", error);
    res.status(500).json({ 
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å",
      error: error.message 
    });
  }
};

const getRoomById = async (req, res) => {
  try {
    const roomData = await room.findById(req.params.id)
      .populate("typeRoom")
      .populate("typeRoomHotel")
      .populate("tag", "name color description");
    if (!roomData) return res.status(404).json({ message: "Room not found" });
    res.json(roomData);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const updateRoom = (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ message: err.message });
    }
    try {
      const roomData = await room.findById(req.params.id);
      if (!roomData) return res.status(404).json({ message: "Room not found" });

      roomData.roomNumber = req.body.roomNumber ?? roomData.roomNumber;
      roomData.price = req.body.price ?? roomData.price;
      roomData.stayPeople = req.body.stayPeople ?? roomData.stayPeople;
      roomData.roomDetail = req.body.roomDetail ?? roomData.roomDetail;
      roomData.air = req.body.air ?? roomData.air;
      roomData.floor = req.body.floor ?? roomData.floor; // ‡πÄ‡∏û‡∏¥‡πà‡∏° floor field
      roomData.typeRoom = req.body.typeRoom ?? roomData.typeRoom;
      roomData.typeRoomHotel = req.body.typeRoomHotel
        ? Array.isArray(req.body.typeRoomHotel)
          ? req.body.typeRoomHotel
          : [req.body.typeRoomHotel]
        : roomData.typeRoomHotel;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tag
      if (req.body.tag !== undefined) {
        roomData.tag = req.body.tag ? (Array.isArray(req.body.tag) ? req.body.tag : [req.body.tag]) : [];
      }

      if (req.files && req.files.length > 0) {
        roomData.imgrooms = req.files.map((file) => file.filename);
      }

      const updatedRoom = await roomData.save();
      console.log('‚úÖ Room updated, updating statistics...');
      await updatePosStatistics(req.partner.id);

      res.json(updatedRoom);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  });
};

const updateRoomStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    const allowedStatuses = ["SleepGunWeb", "Walkin"];
    if (!allowedStatuses.includes(status)) {
      return res.status(400).json({ message: "Invalid status value" });
    }

    const roomData = await room.findById(id);
    if (!roomData) {
      return res.status(404).json({ message: "Room not found" });
    }

    if (status === "SleepGunWeb" && roomData.status !== "SleepGunWeb") {
      const sleepGunCount = await room.countDocuments({
        partnerId: req.partner.id,
        status: "SleepGunWeb"
      });

      if (sleepGunCount >= 5) {
        return res.status(400).json({ 
          message: "‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á SleepGun ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 5 ‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠ partner)",
          currentCount: sleepGunCount,
          maxQuota: 5
        });
      }
    }

    roomData.status = status;
    const updatedRoom = await roomData.save();
    console.log('‚úÖ Room status updated, updating statistics...');
    await updatePosStatistics(req.partner.id);

    res.json(updatedRoom);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const updateRoomStatusRoom = async (req, res) => {
  try {
    const { id } = req.params;
    const { statusRoom } = req.body;
    const allowedStatusRoom = ["‡∏ß‡πà‡∏≤‡∏á", "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î"];
    if (!allowedStatusRoom.includes(statusRoom)) {
      return res.status(400).json({ message: "Invalid statusRoom value" });
    }
    const roomData = await room.findById(id);
    if (!roomData) {
      return res.status(404).json({ message: "Room not found" });
    }
    roomData.statusRoom = statusRoom;
    const updatedRoom = await roomData.save();
    await updatePosStatistics(req.partner.id);

    res.json(updatedRoom);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const updateRoomStatusPromotion = async (req, res) => {
  try {
    const { id } = req.params;
    const { statusPromotion } = req.body;
    const allowedStatusPromotion = ["openPromotion", "closePromotion"];
    if (!allowedStatusPromotion.includes(statusPromotion)) {
      return res.status(400).json({ message: "Invalid statusPromotion value" });
    }
    const roomData = await room.findById(id);
    if (!roomData) {
      return res.status(404).json({ message: "Room not found" });
    }
    roomData.statusPromotion = statusPromotion;
    const updatedRoom = await roomData.save();
    await updatePosStatistics(req.partner.id);

    res.json(updatedRoom);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const deleteAllRooms = async (req, res) => {
  try {
    await room.deleteMany({});
    res.json({ message: "All rooms deleted" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const deleteRoomById = async (req, res) => {
  try {
    const roomData = await room.findByIdAndDelete(req.params.id);
    if (!roomData) return res.status(404).json({ message: "Room not found" });
    res.json({ message: "Room deleted" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getStatusOptions = (req, res) => {
  try {
    const statusOptions = ["SleepGunWeb", "Walkin"];
    res.json(statusOptions);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

const getSleepGunQuota = async (req, res) => {
  try {
    const sleepGunCount = await room.countDocuments({
      partnerId: req.partner.id,
      status: "SleepGunWeb"
    });

    const quota = 5;
    const remaining = Math.max(0, quota - sleepGunCount);

    res.json({
      currentCount: sleepGunCount,
      maxQuota: quota,
      remaining: remaining,
      isFull: sleepGunCount >= quota
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// ==================== TAG CONTROLLERS ====================
const createTag = async (req, res) => {
  try {
    const { name, description, color } = req.body;
    const partnerId = req.partner.id;

    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        message: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
      });
    }

    const existingTag = await tagPOS.findOne({ 
      name: name.trim(), 
      partnerId 
    });
    if (existingTag) {
      return res.status(400).json({
        success: false,
        message: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏Å‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
      });
    }

    const newTag = new tagPOS({
      partnerId,
      name: name.trim(),
      description: description || "",
      color: color || "#FFBB00"
    });

    const savedTag = await newTag.save();
    await updatePosStatistics(partnerId);

    res.status(201).json({
      success: true,
      message: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: savedTag
    });

  } catch (error) {
    console.error("Error creating tag:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏Å",
      error: error.message
    });
  }
};

const getAllTags = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    
    const tags = await tagPOS.find({ partnerId }).sort({ createdAt: -1 });

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: tags,
      count: tags.length
    });

  } catch (error) {
    console.error("Error getting tags:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏Å",
      error: error.message
    });
  }
};

const getTagById = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;

    const tag = await tagPOS.findOne({ _id: id, partnerId });
    if (!tag) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
      });
    }

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: tag
    });

  } catch (error) {
    console.error("Error getting tag by ID:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πá‡∏Å",
      error: error.message
    });
  }
};

const updateTag = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, description, color } = req.body;
    const partnerId = req.partner.id;

    const existingTag = await tagPOS.findOne({ _id: id, partnerId });
    if (!existingTag) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
      });
    }

    if (name && name.trim() !== existingTag.name) {
      const duplicateTag = await tagPOS.findOne({ 
        name: name.trim(),
        partnerId,
        _id: { $ne: id }
      });
      if (duplicateTag) {
        return res.status(400).json({
          success: false,
          message: "‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏Å‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        });
      }
    }

    const updatedTag = await tagPOS.findByIdAndUpdate(
      id,
      {
        name: name ? name.trim() : existingTag.name,
        description: description !== undefined ? description : existingTag.description,
        color: color || existingTag.color
      },
      { new: true, runValidators: true }
    );

    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: updatedTag
    });

  } catch (error) {
    console.error("Error updating tag:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ó‡πá‡∏Å",
      error: error.message
    });
  }
};

const deleteTagById = async (req, res) => {
  try {
    const { id } = req.params;
    const partnerId = req.partner.id;

    const existingTag = await tagPOS.findOne({ _id: id, partnerId });
    if (!existingTag) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö"
      });
    }

    const deletedTag = await tagPOS.findByIdAndDelete(id);
    await updatePosStatistics(partnerId);

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      data: deletedTag
    });

  } catch (error) {
    console.error("Error deleting tag:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å",
      error: error.message
    });
  }
};

const deleteAllTags = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    
    const result = await tagPOS.deleteMany({ partnerId });

    res.status(200).json({
      success: true,
      message: "‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      deletedCount: result.deletedCount
    });

  } catch (error) {
    console.error("Error deleting all tags:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
      error: error.message
    });
  }
};

// ==================== COMPREHENSIVE DATA FETCHING ====================
const getCompletePosData = async (req, res) => {
  try {
    const partnerId = req.partner.id;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const [posData, buildings, rooms, tags] = await Promise.all([
      pos.find({ partnerId }).populate('tags').populate('buildings').populate('rooms'),
      building.find({ partnerId }),
      room.find({ partnerId }).populate('typeRoom').populate('typeRoomHotel').populate('tag', 'name color description'),
      tagPOS.find({ partnerId })
    ]);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const statistics = {
      totalBuildings: buildings.length,
      totalRooms: rooms.length,
      totalTags: tags.length,
      sleepGunRooms: rooms.filter(r => r.status === 'SleepGunWeb').length,
      availableRooms: rooms.filter(r => r.statusRoom === '‡∏ß‡πà‡∏≤‡∏á').length,
      occupiedRooms: rooms.filter(r => r.statusRoom === '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á').length,
      cleaningRooms: rooms.filter(r => r.statusRoom === '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î').length
    };

    res.status(200).json({
      success: true,
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: {
        pos: posData,
        buildings,
        rooms,
        tags,
        statistics
      }
    });
  } catch (error) {
    console.error("‚ùå Error fetching complete POS data:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS",
      error: error.message,
    });
  }
};

// ==================== FLOOR MANAGEMENT ====================
const updateFloorName = async (req, res) => {
  try {
    const { buildingId, oldFloorName } = req.params;
    const { newFloorName } = req.body;
    const partnerId = req.partner.id;

    console.log('üè¢ Updating floor name:', { buildingId, oldFloorName, newFloorName, partnerId });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!newFloorName || !newFloorName.trim()) {
      return res.status(400).json({
        success: false,
        message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà"
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏∂‡∏Å
    const buildingDoc = await building.findOne({ _id: buildingId, partnerId });
    if (!buildingDoc) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const floorIndex = buildingDoc.floors.findIndex(floor => floor.name === oldFloorName);
    if (floorIndex === -1) {
      return res.status(404).json({
        success: false,
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isDuplicate = buildingDoc.floors.some(floor => floor.name === newFloorName.trim());
    if (isDuplicate) {
      return res.status(400).json({
        success: false,
        message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô"
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô
    buildingDoc.floors[floorIndex].name = newFloorName.trim();
    await buildingDoc.save();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    await room.updateMany(
      { 
        buildingId: buildingId, 
        floor: oldFloorName,
        partnerId 
      },
      { 
        $set: { floor: newFloorName.trim() } 
      }
    );

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    await updatePosStatistics(partnerId);

    console.log('‚úÖ Floor name updated successfully');

    res.status(200).json({
      success: true,
      message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      data: {
        buildingId,
        oldFloorName,
        newFloorName: newFloorName.trim()
      }
    });

  } catch (error) {
    console.error("‚ùå Error updating floor name:", error);
    res.status(500).json({
      success: false,
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏±‡πâ‡∏ô",
      error: error.message
    });
  }
};

module.exports = {
  // POS Controllers
  createPos,
  getAllPos,
  getPosById,
  getPosSummary,
  updatePos,
  deletePos,
  deleteAllPos,
  
  // Building Controllers
  createBuilding,
  getAllBuildings,
  getBuildingById,
  updateBuilding,
  deleteBuilding,
  addFloorToBuilding,
  removeFloorFromBuilding,
  getFloorsByBuilding,
  updateFloorName,
  
  // Room Controllers
  createRoom,
  getAllRooms,
  getRoomsByFloor,
  getRoomsByBuildingAndFloor,
  getRoomById,
  updateRoom,
  updateRoomStatus,
  updateRoomStatusRoom,
  updateRoomStatusPromotion,
  deleteAllRooms,
  deleteRoomById,
  getStatusOptions,
  getSleepGunQuota,
  
  // Tag Controllers
  createTag,
  getAllTags,
  getTagById,
  updateTag,
  deleteTagById,
  deleteAllTags,
  
  // Comprehensive Data
  getCompletePosData
}; 